import p from 'got';
import { Logger } from 'tslog';
import R from 'debug';
import g from 'events';
import { JSONRPCServerAndClient, JSONRPCServer, JSONRPCClient, JSONRPC } from 'json-rpc-2.0';
import d from 'ws';

var l=process.env.VERIFNOW_KEY||"",h=process.env.DEBUG?"pretty":"hidden",o=new Logger({name:"APILogger",type:h}),c=p.extend({handlers:[(t,r)=>(Error.captureStackTrace(t.context),r(t))],hooks:{beforeError:[async t=>{var s;let{response:r}=t;return r&&r.body&&(t.message=`${r.statusMessage} (${r.statusCode})`),(s=t==null?void 0:t.options.context)!=null&&s.stack&&(t.stack=t.options.context.stack.split(`
`).slice(1).join(`
`)),t}]},prefixUrl:"https://sms.verifnow.com",headers:{Accept:"application/json","X-API-Key":l},https:{rejectUnauthorized:!1},responseType:"json",retry:{limit:3},mutableDefaults:!0}),b=async()=>{let t=await c.get("api/account"),{body:r}=t;return o.debug("getAccountInfo",r),r},v=async()=>{let t=await c.get("api/line"),{body:r}=t;return o.debug("getCurrentLine",r),r},S=async(t,r)=>{let s=await c.get("api/checkService",{json:{services:t,zip:r}}),{body:e}=s;return o.debug("checkService",e),e},f=async(t,r)=>{let s=await c.post("api/line/changeService",{json:{services:t,zip:r}}),{body:e}=s;return o.debug("changeService",e),e};var n=R("verifnow:ws"),u=class extends g{constructor(s=process.env.VERIFNOW_KEY||""){super();this.subscribed=!1;this.nextId=0;if(!s)throw new Error("API Key is required - set VERIFNOW_KEY or pass it to the constructor");this.apiKey=s,this.transport=new d("wss://sms.verifnow.com/api/ws"),this.transport.on("open",async()=>{n("ws-opened"),setInterval(async()=>{await this.ping();},30*1e3);}),this.transport.on("error",e=>this.emit("error",e)),this.transport.on("close",()=>this.transport=new d("wss://sms.verifnow.com/api/ws")),this.serverAndClient=new JSONRPCServerAndClient(new JSONRPCServer,new JSONRPCClient(e=>{try{return n("request: %O",e),this.transport.send(JSON.stringify(e)),Promise.resolve()}catch(a){return Promise.reject(a)}})),this.serverAndClient.addMethod("smsNotification",async e=>await this.listener(e)),this.transport.onmessage=async e=>await this.serverAndClient.receiveAndSend(JSON.parse(e.data.toString())),this.transport.onclose=e=>this.serverAndClient.rejectAllPendingRequests(`Connection is closed (${e.reason}).`);}createID(){return this.nextId+=1,this.nextId}async unsubscribe(){if(!this.userId)return;let s={jsonrpc:JSONRPC,id:this.createID(),method:"unsubscribe",params:{userId:this.userId}},e=await this.serverAndClient.requestAdvanced(s);e.error?(n("unsubscribe error: %O",e.error),this.emit("error",e.error)):(n("unsubscribed: %s",e.result),this.emit("unsubscribed",e.result),this.subscribed=!1);}async subscribe(){let s={jsonrpc:JSONRPC,id:this.createID(),method:"subscribe",params:{apiKey:this.apiKey}},e=await this.serverAndClient.requestAdvanced(s);e.error?this.emit("error",e.error):(this.emit("subscribed",e.result),this.subscribed=!0);}async getSubscribedUserIds(){let s={jsonrpc:JSONRPC,id:this.createID(),method:"getSubscribedUserIds"},e=await this.serverAndClient.requestAdvanced(s);e.error?this.emit("error",e.error):(n("getSubscribedUserIds rcvd: %O",e.result),this.emit("subscribedIDs",e.result));}async queryRecentSms(){let s={jsonrpc:JSONRPC,id:this.createID(),method:"queryRecentSms"},e=await this.serverAndClient.requestAdvanced(s);e.error?this.emit("error",e.error):(n("queryRecentSms: %O",e.result),this.emit("recentSMS",e.result));}async listener(s){if("method"in s)switch(s.method){case"smsNotification":n("smsNotification: %O",s),this.emit("sms",s.params);break;}else n("unsupported message: %O",s);}async ping(){let s={jsonrpc:JSONRPC,id:this.createID(),method:"ping"},e=await this.serverAndClient.requestAdvanced(s);if(e.error)n(`Received an error with code ${e.error.code} and message ${e.error.message}`),this.emit("error",e.error);else {let{result:a}=e;n("ping: %s",a);}}};

export { u as Connection, S as checkService, b as getAccountInfo, v as getCurrentLine, f as getLine };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JlL2FwaS50cyIsIi4uL3NyYy9jb3JlL2Nvbm5lY3Rpb24udHMiXSwibmFtZXMiOlsiZ290IiwiTG9nZ2VyIiwiVkVSSUZOT1dfS0VZIiwidHlwZSIsImxvZyIsImNsaWVudCIsIm9wdGlvbnMiLCJuZXh0IiwiZXJyb3IiLCJfYSIsInJlc3BvbnNlIiwiZ2V0QWNjb3VudEluZm8iLCJib2R5IiwiZ2V0Q3VycmVudExpbmUiLCJjaGVja1NlcnZpY2UiLCJzZXJ2aWNlcyIsInppcCIsImdldExpbmUiLCJEZWJ1ZyIsIkV2ZW50RW1pdHRlciIsIkpTT05SUEMiLCJKU09OUlBDQ2xpZW50IiwiSlNPTlJQQ1NlcnZlciIsIkpTT05SUENTZXJ2ZXJBbmRDbGllbnQiLCJXZWJTb2NrZXQiLCJkZWJ1ZyIsIkNvbm5lY3Rpb24iLCJhcGlLZXkiLCJyZXF1ZXN0IiwiZXZlbnQiLCJqc29uUlBDUmVxdWVzdCIsIm1lc3NhZ2UiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLE1BQVMsTUFDaEIsT0FBUyxVQUFBQyxNQUFjLFFBT3ZCLElBQU1DLEVBQXVCLFFBQVEsSUFBSSxjQUFnQixHQUVuREMsRUFBTyxRQUFRLElBQUksTUFBUSxTQUFXLFNBQ3RDQyxFQUFNLElBQUlILEVBQU8sQ0FBRSxLQUFNLFlBQWEsS0FBTUUsQ0FBSyxDQUFDLEVBRWxERSxFQUFTTCxFQUFJLE9BQU8sQ0FDeEIsU0FBVSxDQUNSLENBQUNNLEVBQVNDLEtBQ1IsTUFBTSxrQkFBa0JELEVBQVEsT0FBTyxFQUNoQ0MsRUFBS0QsQ0FBTyxFQUV2QixFQUNBLE1BQU8sQ0FDTCxZQUFhLENBQ1gsTUFBT0UsR0FBVSxDQXRCdkIsSUFBQUMsRUF1QlEsR0FBTSxDQUFFLFNBQUFDLENBQVMsRUFBSUYsRUFDckIsT0FBSUUsR0FBWUEsRUFBUyxPQUN2QkYsRUFBTSxRQUFVLEdBQUdFLEVBQVMsa0JBQWtCQSxFQUFTLGdCQUVyREQsRUFBQUQsR0FBQSxZQUFBQSxFQUFPLFFBQVEs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WCxLQUFLLEtBQUssUUFBU0EsRUFBUyxLQUFLLEdBRWpDZSxFQUFNLGdDQUFpQ2YsRUFBUyxNQUFNLEVBQ3RELEtBQUssS0FBSyxnQkFBaUJBLEVBQVMsTUFBTSxFQUU5QyxDQVFBLE1BQU0sZ0JBQWdDLENBQ3BDLElBQU1vQixFQUFpQyxDQUNyQyxRQUFTVixFQUNULEdBQUksS0FBSyxTQUFTLEVBQ2xCLE9BQVEsZ0JBQ1YsRUFFTVYsRUFBNEIsTUFBTSxLQUFLLGdCQUFnQixnQkFBZ0JvQixDQUFjLEVBQ3ZGcEIsRUFBUyxNQUNYLEtBQUssS0FBSyxRQUFTQSxFQUFTLEtBQUssR0FFakNlLEVBQU0scUJBQXNCZixFQUFTLE1BQU0sRUFDM0MsS0FBSyxLQUFLLFlBQWFBLEVBQVMsTUFBTSxFQUUxQyxDQU9BLE1BQWMsU0FBU3FCLEVBQTBELENBQy9FLEdBQUksV0FBWUEsRUFDZCxPQUFRQSxFQUFRLE9BQVEsQ0FDdEIsSUFBSyxrQkFDSE4sRUFBTSxzQkFBdUJNLENBQU8sRUFDcEMsS0FBSyxLQUFLLE1BQU9BLEVBQVEsTUFBTSxFQUMvQixNQUNGLFFBQ0YsTUFFQU4sRUFBTSwwQkFBMkJNLENBQU8sQ0FFNUMsQ0FNQSxNQUFjLE1BQXNCLENBQ2xDLElBQU1ELEVBQWlDLENBQ3JDLFFBQVNWLEVBQ1QsR0FBSSxLQUFLLFNBQVMsRUFDbEIsT0FBUSxNQUNWLEVBRU1WLEVBQTRCLE1BQU0sS0FBSyxnQkFBZ0IsZ0JBQWdCb0IsQ0FBYyxFQUMzRixHQUFJcEIsRUFBUyxNQUNUZSxFQUFNLCtCQUErQmYsRUFBUyxNQUFNLG9CQUFvQkEsRUFBUyxNQUFNLFNBQVMsRUFDaEcsS0FBSyxLQUFLLFFBQVNBLEVBQVMsS0FBSyxNQUM5QixDQUNMLEdBQU0sQ0FBRSxPQUFBc0IsQ0FBTyxFQUFJdEIsRUFDbkJlLEVBQU0sV0FBWU8sQ0FBTSxDQUMxQixDQUNGLENBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ290IGZyb20gJ2dvdCdcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ3RzbG9nJ1xuXG5pbXBvcnQgdHlwZSB7IEFjY291bnRJbmZvIH0gZnJvbSAnLi4vbW9kZWxzJ1xuaW1wb3J0IHR5cGUgeyBMaW5lSW5mbyB9IGZyb20gJy4uL21vZGVscy9saW5lJ1xuaW1wb3J0IHR5cGUgeyBQaG9uZU51bWJlciB9IGZyb20gJy4uL21vZGVscy9udW1iZXInXG5pbXBvcnQgdHlwZSB7IFNlcnZpY2VBdmFpbGFiaWxpdHkgfSBmcm9tICcuLi9tb2RlbHMvc2VydmljZSdcblxuY29uc3QgVkVSSUZOT1dfS0VZOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5WRVJJRk5PV19LRVkgfHwgJydcblxuY29uc3QgdHlwZSA9IHByb2Nlc3MuZW52LkRFQlVHID8gJ3ByZXR0eScgOiAnaGlkZGVuJ1xuY29uc3QgbG9nID0gbmV3IExvZ2dlcih7IG5hbWU6IFwiQVBJTG9nZ2VyXCIsIHR5cGU6IHR5cGUgfSk7XG5cbmNvbnN0IGNsaWVudCA9IGdvdC5leHRlbmQoe1xuICBoYW5kbGVyczogW1xuICAgIChvcHRpb25zLCBuZXh0KSA9PiB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShvcHRpb25zLmNvbnRleHQpXG4gICAgICByZXR1cm4gbmV4dChvcHRpb25zKVxuICAgIH1cbiAgXSxcbiAgaG9va3M6IHtcbiAgICBiZWZvcmVFcnJvcjogW1xuICAgICAgYXN5bmMgKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcmVzcG9uc2UgfSA9IGVycm9yXG4gICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5ib2R5KSB7XG4gICAgICAgICAgZXJyb3IubWVzc2FnZSA9IGAke3Jlc3BvbnNlLnN0YXR1c01lc3NhZ2V9ICgke3Jlc3BvbnNlLnN0YXR1c0NvZGV9KWBcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3I/Lm9wdGlvbnMuY29udGV4dD8uc3RhY2spIHtcbiAgICAgICAgICBlcnJvci5zdGFjayA9IChlcnJvci5vcHRpb25zLmNvbnRleHQuc3RhY2sgYXMgc3RyaW5nKS5zcGxpdCgnXFxuJykuc2xpY2UoMSkuam9pbignXFxuJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXJyb3JcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHByZWZpeFVybDogJ2h0dHBzOi8vc21zLnZlcmlmbm93LmNvbScsXG4gIGhlYWRlcnM6IHtcbiAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAnWC1BUEktS2V5JzogVkVSSUZOT1dfS0VZXG4gIH0sXG4gIGh0dHBzOiB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSxcbiAgcmVzcG9uc2VUeXBlOiAnanNvbicsXG4gIHJldHJ5OiB7XG4gICAgbGltaXQ6IDNcbiAgfSxcbiAgbXV0YWJsZURlZmF1bHRzOiB0cnVlXG59KVxuXG4vKipcbiAqIFJldHVybnMgdXNlcm5hbWUsIGNyZWRpdCBiYWxhbmNlIGFuZCB0aGUgbGFzdCAxMDAgdHJhbnNhY3Rpb25zIGZvciB5b3VyIGFjY291bnQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRBY2NvdW50SW5mbyA9IGFzeW5jICgpOiBQcm9taXNlPEFjY291bnRJbmZvPiA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldCgnYXBpL2FjY291bnQnKVxuICBjb25zdCB7IGJvZHkgfSA9IHJlc3BvbnNlXG4gIGxvZy5kZWJ1ZygnZ2V0QWNjb3VudEluZm8nLCBib2R5KVxuXG4gIHJldHVybiBib2R5IGFzIHVua25vd24gYXMgQWNjb3VudEluZm9cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGN1cnJlbnQgcGhvbmUgbnVtYmVyLCBTTVMgY29ubmVjdGlvbiBzdGF0dXMgYW5kIGluY29taW5nIFNNUyBmb3IgeW91ciBsaW5lLlxuICogTk9URTogRG8gbm90IGNhbGwgdGhpcyBlbmRwb2ludCBpbiByYXBpZCBzdWNjZXNzaW9uIHRvIHBvbGwgU01TLCBpbnN0ZWFkIGNvbnNpZGVyIHVzaW5nIHRoZSB3ZWJzb2NrZXQgQVBJLlxuICovXG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudExpbmUgPSBhc3luYyAoKTogUHJvbWlzZTxMaW5lSW5mbz4gPT4ge1xuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5nZXQoJ2FwaS9saW5lJylcbiAgY29uc3QgeyBib2R5IH0gPSByZXNwb25zZVxuICBsb2cuZGVidWcoJ2dldEN1cnJlbnRMaW5lJywgYm9keSlcblxuICByZXR1cm4gYm9keSBhcyB1bmtub3duIGFzIExpbmVJbmZvXG59XG5cbi8qKlxuICogQ2hlY2tzIExpbmUgYXZhaWxhYmlsaXR5IGJhc2VkIG9uIHNlbGVjdGVkIHNlcnZpY2UgYW5kIHppcCBjb2RlIChvcHRpb25hbCkgY29tYmluYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBjaGVja1NlcnZpY2UgPSBhc3luYyAoc2VydmljZXM6IHN0cmluZ1tdLCB6aXA/OiBzdHJpbmcpOiBQcm9taXNlPFNlcnZpY2VBdmFpbGFiaWxpdHk+ID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0KCdhcGkvY2hlY2tTZXJ2aWNlJywge1xuICAgIGpzb246IHtcbiAgICAgIHNlcnZpY2VzLFxuICAgICAgemlwXG4gICAgfVxuICB9KVxuICBjb25zdCB7IGJvZHkgfSA9IHJlc3BvbnNlXG4gIGxvZy5kZWJ1ZygnY2hlY2tTZXJ2aWNlJywgYm9keSlcblxuICByZXR1cm4gYm9keSBhcyB1bmtub3duIGFzIFNlcnZpY2VBdmFpbGFiaWxpdHlcbn1cblxuLyoqXG4gKiBSZXF1ZXN0cyBhIG5ldyBsaW5lIHdpdGggbmV3IHNlcnZpY2VzLCB6aXAgY29kZSAob3B0aW9uYWwpIGNvbWJpbmF0aW9uLlxuICovXG5leHBvcnQgY29uc3QgZ2V0TGluZSA9IGFzeW5jIChzZXJ2aWNlczogc3RyaW5nW10sIHppcD86IHN0cmluZyk6IFByb21pc2U8UGhvbmVOdW1iZXI+ID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQucG9zdCgnYXBpL2xpbmUvY2hhbmdlU2VydmljZScsIHtcbiAgICBqc29uOiB7XG4gICAgICBzZXJ2aWNlcyxcbiAgICAgIHppcFxuICAgIH1cbiAgfSlcbiAgY29uc3QgeyBib2R5IH0gPSByZXNwb25zZVxuICBsb2cuZGVidWcoJ2NoYW5nZVNlcnZpY2UnLCBib2R5KVxuXG4gIHJldHVybiBib2R5IGFzIHVua25vd24gYXMgUGhvbmVOdW1iZXJcbn1cbiIsImltcG9ydCBEZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgeyBKU09OUlBDLEpTT05SUENDbGllbnQsIEpTT05SUENTZXJ2ZXIsIEpTT05SUENTZXJ2ZXJBbmRDbGllbnQgfSBmcm9tICdqc29uLXJwYy0yLjAnO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7XG5pbXBvcnQgdHlwZSB7IEpTT05SUENSZXF1ZXN0LCBKU09OUlBDUmVzcG9uc2UsIEpTT05SUENTZXJ2ZXJBbmRDbGllbnQgYXMgSlNPTlJQQ1NlcnZlckFuZENsaWVudFQgfSBmcm9tICdqc29uLXJwYy0yLjAnO1xuaW1wb3J0IHR5cGUgeyBNZXNzYWdlRXZlbnQgfSBmcm9tICd3cyc7XG5cbmltcG9ydCB0eXBlIHsgU01TLCBTdWJzY3JpYmVySW5mbyB9IGZyb20gJy4uL21vZGVscy9saW5lJztcbmNvbnN0IGRlYnVnID0gRGVidWcoJ3Zlcmlmbm93OndzJyk7XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBDb25uZWN0aW9uIHtcblxuICAvKipcbiAgICogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy5cbiAgICovXG5cblxuICBvbihldmVudDogJ2Vycm9yJywgbGlzdGVuZXI6IChlcnJvcjogRXJyb3IpID0+IHZvaWQpOiB0aGlzO1xuXG5cbiAgLyoqXG4gICAqIEVtaXR0ZWQgb25jZSBzdWJzY3JpYmVkIHRvIHRoZSB3ZWJzb2NrZXQuXG4gICAqL1xuICBvbihldmVudDogJ3N1YnNjcmliZWQnLCBsaXN0ZW5lcjogKHJlc3VsdDogU3Vic2NyaWJlckluZm8pID0+IHZvaWQpOiB0aGlzO1xuXG5cbiAgLyoqXG4gICAqIEVtaXR0ZWQgb25jZSB1bnN1YnNjcmliZWQgZnJvbSB0aGUgd2Vic29ja2V0LlxuICAgKi9cbiAgb24oZXZlbnQ6ICd1bnN1YnNjcmliZWQnLCBsaXN0ZW5lcjogKHJlc3VsdDogJ3Vuc3Vic2NyaWJlZCcpID0+IHZvaWQpOiB0aGlzO1xuXG4gIC8qKlxuICAgKiBFbWl0dGVkIHdoZW4gYSBuZXcgU01TIGlzIHJlY2VpdmVkLlxuICAgKi9cbiAgb24oZXZlbnQ6ICdzbXNOb3RpZmljYXRpb24nLCBsaXN0ZW5lcjogKHJlc3VsdDogU01TKSA9PiB2b2lkKTogdGhpcztcblxuICAvKipcbiAgICogRW1pdHRlZCBvbmNlIHBlciBjYWxsIHRvIGdldFJlY2VudFNNUy5cbiAgICovXG4gIG9uKGV2ZW50OiAncmVjZW50U01TJywgbGlzdGVuZXI6IChyZXN1bHQ6IFNNU1tdKSA9PiB2b2lkKTogdGhpcztcblxuICAvKipcbiAgICogRW1pdHRlZCBvbmNlIHBlciBjYWxsIHRvIGdldFN1YnNjcmliZWRVc2VySWRzLlxuICAgKi9cbiAgb24oZXZlbnQ6ICdzdWJzY3JpYmVkSURzJywgbGlzdGVuZXI6IChyZXN1bHQ6IG51bWJlcltdKSA9PiB2b2lkKTogdGhpcztcbn1cblxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb24gZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICByZWFkb25seSBzZXJ2ZXJBbmRDbGllbnQ6IEpTT05SUENTZXJ2ZXJBbmRDbGllbnRUO1xuICByZWFkb25seSBhcGlLZXk6IHN0cmluZztcbiAgc3Vic2NyaWJlZDogYm9vbGVhbiA9IGZhbHNlO1xuICB0cmFuc3BvcnQ6IFdlYlNvY2tldDtcbiAgdXNlcm5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgdXNlcklkOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIG5leHRJZDogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihhcGlLZXk6IHN0cmluZyA9IHByb2Nlc3MuZW52LlZFUklGTk9XX0tFWSB8fCAnJykge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIGlmICghYXBpS2V5KSB0aHJvdyBuZXcgRXJyb3IoJ0FQSSBLZXkgaXMgcmVxdWlyZWQgLSBzZXQgVkVSSUZOT1dfS0VZIG9yIHBhc3MgaXQgdG8gdGhlIGNvbnN0cnVjdG9yJyk7XG4gICAgICB0aGlzLmFwaUtleSA9IGFwaUtleTtcblxuICAgICAgdGhpcy50cmFuc3BvcnQgPSBuZXcgV2ViU29ja2V0KCd3c3M6Ly9zbXMudmVyaWZub3cuY29tL2FwaS93cycpO1xuICAgICAgdGhpcy50cmFuc3BvcnQub24oJ29wZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGRlYnVnKCd3cy1vcGVuZWQnKTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGF3YWl0IHRoaXMucGluZygpO1xuICAgICAgICB9LCAzMCAqIDEwMDApO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnRyYW5zcG9ydC5vbignZXJyb3InLCAoZXJyb3IpID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcikpO1xuICAgICAgdGhpcy50cmFuc3BvcnQub24oJ2Nsb3NlJywgKCkgPT4gdGhpcy50cmFuc3BvcnQgPSBuZXcgV2ViU29ja2V0KCd3c3M6Ly9zbXMudmVyaWZub3cuY29tL2FwaS93cycpKTsgLy8gcmVjb25uZWN0IG9uIGNsb3NlXG5cbiAgICAgIHRoaXMuc2VydmVyQW5kQ2xpZW50ID0gbmV3IEpTT05SUENTZXJ2ZXJBbmRDbGllbnQoXG4gICAgICBuZXcgSlNPTlJQQ1NlcnZlcigpLFxuICAgICAgbmV3IEpTT05SUENDbGllbnQoKHJlcXVlc3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkZWJ1ZygncmVxdWVzdDogJU8nLCByZXF1ZXN0KVxuICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnNlbmQoSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMuc2VydmVyQW5kQ2xpZW50LmFkZE1ldGhvZCgnc21zTm90aWZpY2F0aW9uJywgYXN5bmMgKHJlcXVlc3Q6IEpTT05SUENSZXF1ZXN0KSA9PiBhd2FpdCB0aGlzLmxpc3RlbmVyKHJlcXVlc3QpKTtcblxuICAgIHRoaXMudHJhbnNwb3J0Lm9ubWVzc2FnZSA9IGFzeW5jIChldmVudDogTWVzc2FnZUV2ZW50KSA9PiBhd2FpdCB0aGlzLnNlcnZlckFuZENsaWVudC5yZWNlaXZlQW5kU2VuZChKU09OLnBhcnNlKGV2ZW50LmRhdGEudG9TdHJpbmcoKSkpO1xuICAgIHRoaXMudHJhbnNwb3J0Lm9uY2xvc2UgPSAoZXZlbnQpID0+IHRoaXMuc2VydmVyQW5kQ2xpZW50LnJlamVjdEFsbFBlbmRpbmdSZXF1ZXN0cyhgQ29ubmVjdGlvbiBpcyBjbG9zZWQgKCR7ZXZlbnQucmVhc29ufSkuYCk7XG4gIH1cblxuXG4gIHByaXZhdGUgY3JlYXRlSUQoKTogbnVtYmVyIHtcbiAgICB0aGlzLm5leHRJZCArPSAxO1xuICAgIHJldHVybiB0aGlzLm5leHRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIFNNUyBub3RpZmljYXRpb25zIG92ZXIgdGhpcyB3ZWJzb2NrZXQgY29ubmVjdGlvbi5cbiAgICovXG4gIGFzeW5jIHVuc3Vic2NyaWJlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICghdGhpcy51c2VySWQpIHJldHVybjtcbiAgICBjb25zdCBqc29uUlBDUmVxdWVzdDogSlNPTlJQQ1JlcXVlc3QgPSB7XG4gICAgICBqc29ucnBjOiBKU09OUlBDLFxuICAgICAgaWQ6IHRoaXMuY3JlYXRlSUQoKSxcbiAgICAgIG1ldGhvZDogXCJ1bnN1YnNjcmliZVwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHVzZXJJZDogdGhpcy51c2VySWQsXG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3BvbnNlOiBKU09OUlBDUmVzcG9uc2UgPSBhd2FpdCB0aGlzLnNlcnZlckFuZENsaWVudC5yZXF1ZXN0QWR2YW5jZWQoanNvblJQQ1JlcXVlc3QpO1xuICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgZGVidWcoJ3Vuc3Vic2NyaWJlIGVycm9yOiAlTycsIHJlc3BvbnNlLmVycm9yKVxuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHJlc3BvbnNlLmVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWcoJ3Vuc3Vic2NyaWJlZDogJXMnLCByZXNwb25zZS5yZXN1bHQpXG4gICAgICB0aGlzLmVtaXQoJ3Vuc3Vic2NyaWJlZCcsIHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICB0aGlzLnN1YnNjcmliZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRvIFNNUyBub3RpZmljYXRpb25zIG92ZXIgdGhpcyB3ZWJzb2NrZXQgY29ubmVjdGlvbi5cbiAgICovXG4gIGFzeW5jIHN1YnNjcmliZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBqc29uUlBDUmVxdWVzdDogSlNPTlJQQ1JlcXVlc3QgPSB7XG4gICAgICBqc29ucnBjOiBKU09OUlBDLFxuICAgICAgaWQ6IHRoaXMuY3JlYXRlSUQoKSxcbiAgICAgIG1ldGhvZDogXCJzdWJzY3JpYmVcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBhcGlLZXk6IHRoaXMuYXBpS2V5LFxuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCByZXNwb25zZTogSlNPTlJQQ1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5zZXJ2ZXJBbmRDbGllbnQucmVxdWVzdEFkdmFuY2VkKGpzb25SUENSZXF1ZXN0KTtcbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCByZXNwb25zZS5lcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZW1pdCgnc3Vic2NyaWJlZCcsIHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICB0aGlzLnN1YnNjcmliZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIElEcyBvZiBhbGwgdXNlcnMgc3Vic2NyaWJlZCB0byBTTVMgbm90aWZpY2F0aW9uc1xuICAgKi9cbiAgYXN5bmMgZ2V0U3Vic2NyaWJlZFVzZXJJZHMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QganNvblJQQ1JlcXVlc3Q6IEpTT05SUENSZXF1ZXN0ID0ge1xuICAgICAganNvbnJwYzogSlNPTlJQQyxcbiAgICAgIGlkOiB0aGlzLmNyZWF0ZUlEKCksXG4gICAgICBtZXRob2Q6IFwiZ2V0U3Vic2NyaWJlZFVzZXJJZHNcIixcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzcG9uc2U6IEpTT05SUENSZXNwb25zZSA9IGF3YWl0IHRoaXMuc2VydmVyQW5kQ2xpZW50LnJlcXVlc3RBZHZhbmNlZChqc29uUlBDUmVxdWVzdCk7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgcmVzcG9uc2UuZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnZ2V0U3Vic2NyaWJlZFVzZXJJZHMgcmN2ZDogJU8nLCByZXNwb25zZS5yZXN1bHQpXG4gICAgICB0aGlzLmVtaXQoJ3N1YnNjcmliZWRJRHMnLCByZXNwb25zZS5yZXN1bHQpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmV0cmlldmUgU01TIG1lc3NhZ2VzIGZvciBhbGwgc3Vic2NyaWJlZCB1c2VyIGFjY291bnRzIHJlY2VpdmVkIGluIHRoZSBsYXN0IGZpdmUgbWludXRlcy5cbiAgICBUaGlzIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgdG8gZW5zdXJlIHNvIFNNUyBtZXNzYWdlcyB3ZXJlIG1pc3NlZCBzaW5jZSB0aGUgbGFzdCBjb25uZWN0aW9uIGluIGNhc2Ugb2YgYSB0ZW1wb3JhcnkgZGlzY29ubmVjdC5cbiAgICBJdCBzaG91bGQgbm90IGJlIHVzZWQgdG8gcG9sbCBmb3IgbmV3IFNNUyAodGhlcmUgaXMgYWxyZWFkeSBhIG5vdGlmaWNhdGlvbiBmb3IgdGhhdCkhXG4gICAqL1xuICBhc3luYyBxdWVyeVJlY2VudFNtcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBqc29uUlBDUmVxdWVzdDogSlNPTlJQQ1JlcXVlc3QgPSB7XG4gICAgICBqc29ucnBjOiBKU09OUlBDLFxuICAgICAgaWQ6IHRoaXMuY3JlYXRlSUQoKSxcbiAgICAgIG1ldGhvZDogXCJxdWVyeVJlY2VudFNtc1wiLFxuICAgIH07XG5cbiAgICBjb25zdCByZXNwb25zZTogSlNPTlJQQ1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5zZXJ2ZXJBbmRDbGllbnQucmVxdWVzdEFkdmFuY2VkKGpzb25SUENSZXF1ZXN0KTtcbiAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCByZXNwb25zZS5lcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdxdWVyeVJlY2VudFNtczogJU8nLCByZXNwb25zZS5yZXN1bHQpXG4gICAgICB0aGlzLmVtaXQoJ3JlY2VudFNNUycsIHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQGludGVybmFsXG4gICogSW50ZXJuYWwgbGlzdGVuZXIgZm9yIGluY29taW5nIG1lc3NhZ2VzLlxuICAqIEVtaXRzICdzbXNOb3RpZmljYXRpb24nIGV2ZW50IG9uIGluY29taW5nIFNNUy5cbiAgKi9cbiAgcHJpdmF0ZSBhc3luYyBsaXN0ZW5lcihtZXNzYWdlOiBKU09OUlBDUmVxdWVzdCB8IEpTT05SUENSZXNwb25zZSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICgnbWV0aG9kJyBpbiBtZXNzYWdlKSB7XG4gICAgICBzd2l0Y2ggKG1lc3NhZ2UubWV0aG9kKSB7XG4gICAgICAgIGNhc2UgXCJzbXNOb3RpZmljYXRpb25cIjpcbiAgICAgICAgICBkZWJ1Zygnc21zTm90aWZpY2F0aW9uOiAlTycsIG1lc3NhZ2UpXG4gICAgICAgICAgdGhpcy5lbWl0KCdzbXMnLCBtZXNzYWdlLnBhcmFtcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCd1bnN1cHBvcnRlZCBtZXNzYWdlOiAlTycsIG1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQGludGVybmFsXG4gICAqIEludGVybmFsIHBpbmcgY29tbWFuZCB0byBrZWVwIHRoZSBjb25uZWN0aW9uIGFsaXZlLlxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBwaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGpzb25SUENSZXF1ZXN0OiBKU09OUlBDUmVxdWVzdCA9IHtcbiAgICAgIGpzb25ycGM6IEpTT05SUEMsXG4gICAgICBpZDogdGhpcy5jcmVhdGVJRCgpLFxuICAgICAgbWV0aG9kOiBcInBpbmdcIixcbiAgICB9O1xuXG4gICAgY29uc3QgcmVzcG9uc2U6IEpTT05SUENSZXNwb25zZSA9IGF3YWl0IHRoaXMuc2VydmVyQW5kQ2xpZW50LnJlcXVlc3RBZHZhbmNlZChqc29uUlBDUmVxdWVzdCk7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgIGRlYnVnKGBSZWNlaXZlZCBhbiBlcnJvciB3aXRoIGNvZGUgJHtyZXNwb25zZS5lcnJvci5jb2RlfSBhbmQgbWVzc2FnZSAke3Jlc3BvbnNlLmVycm9yLm1lc3NhZ2V9YClcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHJlc3BvbnNlLmVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlc3BvbnNlO1xuICAgICAgZGVidWcoJ3Bpbmc6ICVzJywgcmVzdWx0KVxuICAgIH1cbiAgfVxufVxuIl19